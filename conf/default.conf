# The configuration file syntax and mechanisms is largely inspired from NGINX configuration's files.
# The default configuration consist of 4 servers (=host), each of them listening to a unique port and all of them sharing a common port
#	- server1 :
#		- listen to 8000 and 8080
#		- able to receive static upload
#		- contain lots of CGI (including one for upload)
#		- serves a dir_listing on data/images/ folder
#	- server2 :
#		- listen to 8000 and 8081
#		- contain a fully static page
#	- server3/tricky_server :
#		- listen to 8000 and 8082
#		- has a small body size limitation (5 bytes) and is used to perform test via the sender
#	- server4/bad_config_server :
#		- listen to 8000 and 8083
#		- contain an unexisting path for error_pages
#		- all static error_pages such as 404 will result in 500 Interal Error

# Default location for error pages (404, 403, ...).
# Applies to 403, 404, 405, 408, 411, 413, 414, 415, 417, 505
# Warning : If a page is missing, it will result in 500 Internal Error response
default_error_pages ./errors_default/;

# Server block, may be called host
server {

	# Port and IP, in localhost situation IP will always be 127.0.0.1
	listen 8080 8000; #this host will be listening at 2 port at the same
	host 127.0.0.1;

	#server_name is used to identify which host a request is intended to using
	# the host header.
	# For example here 4 host are listening to port 8000. If a client send a
	# request to 127.0.0.1:8000, server will identify the corresponding host
	# by looking at the value of host header in the request. If none match, the request
	# will be assigned to the first host of the list of host listening to the port 8000.
	server_name server1 another.name.fr; #could be also called "host_name"
	
	# Request with a greater content-length, or request being unchunked
	#	and mesured beyond this limit, will be rejected with 413 response.
	body_max_size 10000000; 

	# Location matching system
	# Can include wildcard, a requested uri will always match the closest location
	# to its. 

	location * { # default location => mandatory
		root ./var/www/server1/;
		methods GET POST HEAD; #Allowed methods
		dir_listing off; #Enable/disable dir_listing when the uri is a folder

		default_uri index.html; # If the uri is a folder, default_uri will be returned.
								# Prevails over dir_listing is it set to ON.
		upload off; // Enable/disable static upload via POST. Do NOT prevent static upload via CGI
	};

	location errors_default/* {
		root ./; #obligatoire
	};

	location images/* {

		root ./var/www/server1/data/;
		methods POST GET HEAD;
		dir_listing on;
		upload on; #static upload

		# upload_root: Static upload via POST will be stored to this location
		#  rather than the root defined above. Beware that future GET request
		#  will have to be addressed to the upload_root
		upload_root ./var/www/server1/upload;
	};

	location upload/* {
		root ./var/www/server1/;
		methods GET DELETE HEAD;
		dir_listing on;
	};

	# Redirections examples.
	# Even if the root property is not used is this location block, it still needs to be defined.

	location data/images* {
		root ./var/www/server1/;
		# Multiple choice redirection. First one will be added to "Location" header.
		return 300 "http://localhost:8080/images/." http://localhost:8080/upload/images/.;
	};

	location redir300 redir300/ redir300/* {
		root ./;
		return 300 "http://localhost:8080/index.html" http://localhost:8080/images/;
	};

	location redir301 redir301/ redir301/* {
		root ./;
		return 301 "http://localhost:8080/index.html";
	};

	location redir302 redir302/ redir302/* {
		root ./;
		return 302 "http://localhost:8080/index.html";
	};

	location redir303 redir303/ redir303/* {
		root ./;
		return 303 "http://localhost:8080/index.html";
	};

	location redir307 redir307/ redir307/* {
		root ./;
		return 307 "http://localhost:8080/index.html";
	};

	location redir308 redir308/ redir308/* {
		root ./;
		return 308 "http://localhost:8080/index.html";
	};

	# CGI block examples. Matching system is the same that the one for location.
	# A CGI uri (ex: /script.py) can match BOTH a CGI location and a standard location.
	# This is made to enable redirection on CGI as well as to prevent CGI method rules to
	# override standard location's method rules.
	# Methods rules for both block (CGI and standard location) will be bitwise ANDed.
	# This mean that a method needs to be allowed BOTH in CGI block and corresponding
	# location block (being default location '*' if none defined).

	cgi *.php* {

		root ./var/www/server1/cgi/php/; # Path of the script location on the server
		methods POST GET DELETE HEAD;
		exec /usr/bin/php; # Path to the corresponding interpreter program
		identifier .php; # Part of the uri defining the CGI extension.
						 # Used to build PATH_INFO and PATH_TRANSLATED
	};

	cgi *.py* {
		root ./var/www/server1/cgi/py/;
		methods POST GET DELETE HEAD;
		exec /usr/bin/python3;
		identifier .py;
	};

	# Here is an example of compiled CGI. 
	# exec value has to remain ./ in order for the server to know that it 
	# doesn't have to call an interpreter.
	# Compiled CGI are not really easy to work with as they need to be recompiled when edited.
	cgi *.out* {
		root ./var/www/server1/cgi/out/;
		methods POST GET DELETE;
		identifier .out;
		exec ./;
	};
};

# This server is used to host a static page
server {
	listen			8081 8000;
	host			127.0.0.1;
	server_name		server2;
	body_max_size	100;

	location * {
		root		./var/www/server2/;
		default_uri	index.html;
		methods		GET;
	};

};

# This server is used to perform tests via the sender program
server {
	listen			8082 8000;
	host			127.0.0.1;
	server_name		tricky_server server3;
	body_max_size	5; #Most of requests containing body will be rejected

	location * {
		methods		GET HEAD;
		root		./var/www/server3/;
		dir_listing	on;
	};

	# This location doesn't allow any method
	location no_method {
		methods;
		root 		./var/www/server3/;
	};

	# This location is used to illustrate a ressource that doesn't exist.
	# Will result in a 404 error.
	location does_not_exist {
		root		./var/www/server3/;
	};

	# This location can be used to test access to a folder when dir_listing is off
	location dir {
		root		./var/www/server3/;
		dir_listing	off;
	};

	# This is a bad CGI : uri containing .bad will match this CGI but the
	# exec will fail.
	cgi *.bad* {
		root		./var/www/server3/;
		exec		./var/pouetewtwefwwfwe;
		methods		GET POST DELETE HEAD;
		identifier	.bad;
	};

};

# This server is used to demonstrate 500 Internal Error
# As the error_pages path is invalid, and the default root does not exist either,
# any request to this server will result in a system call failing
# and them returns an internal error.
# Can be used to test the server robusteness to internal errors.
server {
	listen			8083 8000;
	host			127.0.0.1;
	server_name		bad_config_server server4;

	error_pages		./ewrwerw;

	location * {
		root ./var/server4;
		methods GET POST DELETE HEAD;
	};

};
